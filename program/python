#!/usr/bin/python
# -*- coding: UTF-8 -*-    使用utf-8


数据类型
    Numbers（数字）
        int
        long
        float
        complex
            complex(a,b) 实部 虚部
    String（字符串）
        截取字符串 [头下标:尾下标]
        + 字符串连接符
    List（列表）不同数据类型集合
        加号 为连接符
        截取列表 [头下标:尾下标]
        list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]
    Tuple（元组）只读
        截取元组 [头下标:尾下标]
        tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )
    Dictionary（字典）
        tinydict = {'name': 'runoob','code':6734, 'dept': 'sales'}
            key:value 用key存取
    数据类型转换
        数据类型()
    成员运算符 (字符串,列表,元组)
        in x在y序列中,返回true
            a in list 
and &&
or ||
not !

流程语句
    条件
        if 判断条件:
            执行
        else:
            执行
    循环
        while (条件):
            执行
        for value in list
            执行
            
            for i in range(1,10)
打印变量
    print "abc", 变量
        abc变量
    print(变量名)
    
    print "My name is %s and weight is %d kg!" % ('Zara', 21) 


import 模块名
模块名.xxx = 引用

if __name__ == '__main__'的意思是：当 .py 文件被直接运行时，if __name__ == '__main__' 之下的代码块将被运行； 
当 .py 文件以模块形式被导入时，if __name__ == '__main__'之下的代码块不被运行
    if __name__ == "__main__":
        执行
    
类
    class Employee:
   '所有员工的基类'
   empCount = 0
 
   def __init__(self, name, salary):
        self.name = name
        self.salary = salary
        Employee.empCount += 1
   
   def displayCount(self):
        print "Total Employee %d" % Employee.empCount
 
   def displayEmployee(self, age):
        print "Name : ", self.name,  ", Salary: ", self.salary, "Age:", age
      
A=Employee("我",180)
A.displayCount
A.displayEmployee(30)

    empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。

    第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法

    self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。